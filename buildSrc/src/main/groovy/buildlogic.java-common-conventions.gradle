plugins {
    id 'java'
    id 'net.ltgt.errorprone'
    // // JaCoCo transforms the bytecode, which severely impacts how
    // // Graal/Truffle JIT compile the program.
    // // (For example, it introduces concurrency constructs to pass
    // // signals for code coverage, which Graal/Truffle will try to
    // // inline-&-compile and will eventually bail out because it is
    // // just too complex.)
    // id 'jacoco'
}

repositories {
    mavenCentral()
    // TODO: use maven central when bugs (in fory) are fixed
    maven {
        url = "https://repository.apache.org/content/repositories/snapshots/"
        mavenContent {
            snapshotsOnly()
        }
    }
}

boolean isGraalVM() {
    return file("${System.getProperty("java.home")}/lib/graalvm").exists()
}
List<String> getGraalVMArgs() {
    boolean isGraalVM = isGraalVM()
    List<String> graalArgs = []
    String truffleVersion = libs.graalvm.truffle.api.get().version
    if (!isGraalVM) {
        var classpath = configurations.create('compilerClasspath') {
            canBeResolved = true
        }
        dependencies {
            compilerClasspath "org.graalvm.compiler:compiler:${truffleVersion}"
        }
        var jars = classpath.filter { it.name.endsWith(".jar") }  // Filter out POMs
        graalArgs += [
                '-XX:+UnlockExperimentalVMOptions',
                '-XX:+EnableJVMCI',
                "--upgrade-module-path=${jars.asPath}",
        ]
    }
    return graalArgs
}
int preferredJvmVersion() {
    if (!isGraalVM()) {
        // org.graalvm.compiler:compiler does not seem to support JDK 24 yet.
        return 23
    }
    String version = System.getProperty("java.version")
    String major = version.split("\\.")[0]
    return Math.max(Integer.parseInt(major), 23)
}

ext {
    graalArgs = getGraalVMArgs()
}

dependencies {
    errorprone libs.errorprone.core
    errorprone libs.errorprone.nullaway

    implementation libs.jspecify

    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(preferredJvmVersion())
    }
}

tasks.withType(JavaCompile).configureEach {
    options.errorprone {
        disableWarningsInGeneratedCode = true
        option('NullAway:AnnotatedPackages', 'party.iroiro')

        // In contract to common Java practices, we use specialized types
        // as much as possible: ArrayList over List, HashMap over Map, etc.
        // This is to cater for Truffle's handling of polymorphism.
        disable('NonApiType')
        // The current codebase is filled with function templates throwing
        // UnsupportedOperationExceptions.
        // TODO: remove this line after we finish the implementation
        disable('DoNotCallSuggester')
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
