#+title: Juicemacs.elisp

This subproject holds the Emacs Lisp interpreter (to be) used by Juicemacs. This
document tries to provide a brief introduction of its implementation and several
behaviors different from GNU Emacs Lisp.

* Structure

Juicemacs.elisp is written with the [[https://github.com/oracle/graal/tree/master/truffle][Truffle Language Implementation Framework]]
and loosely follows how language implementations structure their code.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/ELispLanguage.java][=party.iroiro.juicemacs.elisp.ELispLanguage=]] defines a =TruffleLanguage=,
  feeding user input into a parser, starting code execution.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/ELispContext.java][=party.iroiro.juicemacs.elisp.runtime.ELispContext=]] is a Truffle language
  context. Unlike other language implementations, however, it is a singleton
  class. (Well, GNU Emacs has many many things global, and it is very hard (for
  me) to rework the logic to be able to have multiple contexts.)

  Currently, it holds all the global symbols and is in charge of initializing
  the language state (interning symbols, binding built-in subroutines,
  initializing symbol properties by calling methods in =ELispGlobals=, etc.).

- [[file:src/main/java/party/iroiro/juicemacs/elisp/forms/][=party.iroiro.juicemacs.elisp.forms=]] holds all the built-in subroutine
  definitions. Most of the methods there are generated by
  [[file:scripts/extract_emacs_src.py][scripts/extract_emacs_src.py]]= from Emacs sources and are yet to be
  implemented. (They currently simply throw =UnsupportedOperationException=.)

  The process of implementing a subroutine is quite straight-forward:

  - Find the class corresponding to the subroutine
  - Change its method signature to match the real subroutine
  - Optionally write more =@Specialization= methods to handle all possible types
  - Write the code

  If a subroutine is not generated yet. One may modify =build.gradle= and run
  =./gradlew :elisp:emacsGen=.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/parser/][=party.iroiro.juicemacs.elisp.parser=]] holds a lexer and a parser.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/objects/][=party.iroiro.juicemacs.elisp.runtime.objects=]] holds the ELisp object
  definitions.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/nodes/][=party.iroiro.juicemacs.elisp.nodes=]] and several classes in
  [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/][=party.iroiro.juicemacs.elisp.runtime=]] implements logic to run ELisp code with
  Truffle. One may start from
  [[file:src/main/java/party/iroiro/juicemacs/elisp/nodes/ELispInterpretedNode.java][=party.iroiro.juicemacs.elisp.nodes.ELispInterpretedNode=]] to see how we
  transform a Lisp object into a dynamic AST.
