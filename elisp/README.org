#+title: Juicemacs.elisp

This subproject holds the Emacs Lisp interpreter (to be) used by Juicemacs. This
document tries to provide a brief introduction of its implementation and several
behaviors different from GNU Emacs Lisp.

* Running

The build process of GNU Emacs generates a bunch of file that are crucial to the
interpreter and you will need to first build a GNU Emacs if you want this
project to do anything useful. (For example, Unicode properties and charset
mappings in Emacs are all loaded from generated =.el= or mapping files.)
However, currently you will need to delete/rename the generated =loaddefs.el=
because it uses some autoloaded functions before their autoload definitions
(=rx=).

Currently, the project still cannot fully run through the Emacs =loadup.el=
(although it's almost there), the execution of which is required for an
Emacs-like ELisp environment. You may try out a partially initialized
environment with [[file:../app/]], which contains a simple ELisp REPL.

See [[file:../README.org]] for instructions.

* Structure

Juicemacs.elisp is written with the [[https://github.com/oracle/graal/tree/master/truffle][Truffle Language Implementation Framework]]
and loosely follows how language implementations structure their code.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/ELispLanguage.java][=party.iroiro.juicemacs.elisp.ELispLanguage=]] defines a =TruffleLanguage=,
  feeding user input into a parser, starting code execution.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/ELispContext.java][=party.iroiro.juicemacs.elisp.runtime.ELispContext=]] is a Truffle language
  context.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/ELispGlobals.java][=party.iroiro.juicemacs.elisp.runtime.ELispGlobals=]] holds almost all the
  global elisp variables. It is a huge file, most of which is generated directly
  from Emacs source code.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/forms/][=party.iroiro.juicemacs.elisp.forms=]] holds all the built-in subroutine
  definitions. Most of the methods there are generated by [[file:scripts/emacs-extractor/][=emacs-extractor=]] from
  Emacs sources and are yet to be implemented. (They currently simply throw
  =UnsupportedOperationException=.)

  The process of implementing a subroutine is quite straight-forward:

  - Find the class corresponding to the subroutine
  - Change its method signature to match the real subroutine
  - Optionally write more =@Specialization= methods to handle all possible types
  - Write the code

  If a subroutine is not generated yet. One will need to modify
  =emacs-extractor= and run =./gradlew :elisp:emacsGen=.

  - [[file:src/main/java/party/iroiro/juicemacs/elisp/forms/regex/][=party.iroiro.juicemacs.elisp.forms.regex=]] contains a tiny regex engine that
    (I hope) conforms to the Emacs regex syntax.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/parser/][=party.iroiro.juicemacs.elisp.parser=]] holds a lexer and a parser.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/objects/][=party.iroiro.juicemacs.elisp.runtime.objects=]] holds the ELisp object
  definitions.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/nodes/][=party.iroiro.juicemacs.elisp.nodes=]] and several classes in
  [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/][=party.iroiro.juicemacs.elisp.runtime=]] implements logic to run ELisp code with
  Truffle. One may start from
  [[file:src/main/java/party/iroiro/juicemacs/elisp/nodes/ELispInterpretedNode.java][=party.iroiro.juicemacs.elisp.nodes.ELispInterpretedNode=]] to see how we
  transform a Lisp object into a dynamic AST.

- [[file:src/main/java/party/iroiro/juicemacs/elisp/nodes/bytecode/][=party.iroiro.juicemacs.elisp.nodes.bytecode=]] (and the [[file:src/main/java/party/iroiro/juicemacs/elisp/runtime/objects/ELispBytecode.java][=ELispBytecode=]] class)
  hosts classes implementing a Emacs Lisp bytecode interpreter.
