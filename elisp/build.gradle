/*
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'buildlogic.java-library-conventions'
}

ext {
    truffleVersion = '24.0.2'
}

dependencies {
    implementation 'org.eclipse.jdt:org.eclipse.jdt.annotation:2.3.0'
    implementation 'com.lodborg:interval-tree:1.0.0'
    api "org.graalvm.truffle:truffle-api:${truffleVersion}"
    annotationProcessor "org.graalvm.truffle:truffle-dsl-processor:${truffleVersion}"
}

// Template generation from Emacs sources
var templateTasks = [
        ['Alloc', 'alloc.c'],
        ['CharSet', 'charset.c'],
        ['CharTab', 'chartab.c'],
        ['Comp', 'comp.c'],
        ['Data', 'data.c'],
        ['EditFns', 'editfns.c'],
        ['Emacs', 'emacs.c'],
        ['Eval', 'eval.c'],
        ['FileIO', 'fileio.c'],
        ['Fns', 'fns.c'],
        ['LRead', 'lread.c'],
        ['Process', 'process.c'],
        ['Search', 'search.c'],
]
// Force sequential evaluation
templateTasks.each {
    var templateScript = file("scripts/extract-emacs-src.py")
    var input = file("emacs/src/${it[1]}")
    var clazz = "BuiltIn${it[0]}"
    var base = "src/main/java/party/iroiro/juicemacs/elisp"
    var target = file("${base}/forms/${clazz}.java")
    var context = file("${base}/runtime/ELispContext.java")
    var globals = file("${base}/runtime/ELispGlobals.java")
    tasks.register("emacsGen${it[0]}") {
        description = "${input}"
        inputs.files input, templateScript
        outputs.files target, context
        doLast {
            exec {
                commandLine 'python', templateScript,
                        '-j', target, '-c', context, '-g', globals, input
            }
        }
    }
}
(0..<templateTasks.size() - 1).each { i ->
    tasks.named("emacsGen${templateTasks[i + 1][0]}") {
        dependsOn tasks.named("emacsGen${templateTasks[i][0]}")
    }
}
tasks.register("emacsGen") {
    description = 'Generate symbol/function definitions from Emacs source'
    dependsOn templateTasks.collect { tasks.named("emacsGen${it[0]}") }
}
