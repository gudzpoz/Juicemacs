/*
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'buildlogic.java-library-conventions'
    id 'pmd'
    id 'me.champeau.jmh' version '0.7.2'
}

pmd {
    toolVersion = libs.pmd.java.get().version
    incrementalAnalysis = true
    ruleSetFiles = files(
            'scripts/pmd-truffle-practices.xml',
            'scripts/pmd-elisp-cautions.xml',
            'scripts/pmd-linguistics.xml',
    )
    ruleSets = []
}

dependencies {
    pmd project(':commons:pmd-no-int')
    pmd libs.bundles.pmd

    implementation project(':commons:piece-tree')

    implementation libs.commons.compress
    implementation libs.commons.lang3
    implementation libs.commons.text
    implementation libs.fory.core
    implementation libs.bundles.eclipse.collections
    implementation libs.juniversalchardet

    api libs.graalvm.truffle.api
    implementation libs.graalvm.polyglot
    annotationProcessor libs.graalvm.dsl.processor
    runtimeOnly libs.graalvm.truffle.runtime

    testImplementation libs.bundles.jmh
    testImplementation libs.graalvm.truffle.tck
    testRuntimeOnly libs.graalvm.inspect
    testRuntimeOnly libs.graalvm.profiler
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
}

var dumpTestToIGV = false
var dumpAssembly = false
test {
    jvmArgs += graalArgs + ['-XX:+UseParallelGC']
    if (dumpTestToIGV || dumpAssembly) {
        jvmArgs += ['-Djdk.graal.Dump=:1']
    }
    if (dumpTestToIGV) {
        jvmArgs += ['-Djdk.graal.PrintGraph=Network']
    }
    if (dumpAssembly) {
        jvmArgs += ['-Djdk.graal.PrintBackendCFG=true']
    }
}

var emacsSrc = file('emacs/src')
var extractorDir = 'scripts/emacs-extractor'
var extractionConfig = file("${extractorDir}/extraction_config.py")
var extractionFinalizer = file("${extractorDir}/extraction_java.py")
var base = 'src/main/java/party/iroiro/juicemacs/elisp'

// One huge task to generate all sources
tasks.register("emacsGen", Exec) {
    description = 'Generate symbol/function definitions from Emacs source'
    commandLine "${extractorDir}/.venv/bin/emacs-extractor", emacsSrc,
            '-o', "${extractorDir}/extraction.json",
            '-c', extractionConfig, '-f', extractionFinalizer,
            '-g', file("${base}/runtime/ELispGlobals.java"),
            '--buffer', file("${base}/runtime/objects/ELispBuffer.java"),
            '--frame', file("${base}/runtime/internal/ELispFrame.java"),
            '--kboard', file("${base}/runtime/internal/ELispKboard.java"),
            '-C', file("${base}/forms/ELispBuiltInConstants.java"),
            '-d', file("${base}/forms")
}
