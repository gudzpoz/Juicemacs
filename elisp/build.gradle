/*
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'buildlogic.java-library-conventions'
    id 'me.champeau.jmh' version '0.7.2'
}

pmd {
    toolVersion = pmdVersion
    incrementalAnalysis = true
    ruleSetFiles = files(
            'scripts/pmd-truffle-practices.xml',
            'scripts/pmd-elisp-cautions.xml',
            'scripts/pmd-linguistics.xml',
    )
    ruleSets = []
}

dependencies {
    pmd project(':commons:pmd-no-int')
    pmd "net.sourceforge.pmd:pmd-ant:${pmdVersion}"
    pmd "net.sourceforge.pmd:pmd-java:${pmdVersion}"

    implementation project(':commons:mule-truffle')
    implementation project(':commons:piece-tree')

    implementation 'org.apache.commons:commons-text:1.12.0'
    // TODO: fury is now named fory
    implementation 'org.apache.fury:fury-core:0.10.3'
    implementation "org.eclipse.collections:eclipse-collections-api:${eclipseCollectionsVersion}"
    implementation "org.eclipse.collections:eclipse-collections:${eclipseCollectionsVersion}"
    implementation 'com.github.albfernandez:juniversalchardet:2.5.0'

    api "org.graalvm.truffle:truffle-api:${truffleVersion}"
    implementation "org.graalvm.polyglot:polyglot:${truffleVersion}"
    annotationProcessor "org.graalvm.truffle:truffle-dsl-processor:${truffleVersion}"
    runtimeOnly "org.graalvm.truffle:truffle-runtime:${truffleVersion}"

    testImplementation 'org.openjdk.jmh:jmh-core:1.37'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
    testImplementation "org.graalvm.truffle:truffle-tck:${truffleVersion}"
    testRuntimeOnly "org.graalvm.polyglot:inspect-community:${truffleVersion}"
    testRuntimeOnly "org.graalvm.polyglot:profiler-community:${truffleVersion}"
}

tasks.withType(JavaCompile).configureEach {
    options.fork = true
}

var dumpTestToIGV = false
test {
    jvmArgs += graalArgs
    if (dumpTestToIGV) {
        jvmArgs += ['-Djdk.graal.Dump=:1', '-Djdk.graal.PrintGraph=Network']
    }
}

var emacsSrc = file('emacs/src')
var extractorDir = 'scripts/emacs-extractor'
var extractionConfig = file("${extractorDir}/extraction_config.py")
var extractionFinalizer = file("${extractorDir}/extraction_java.py")
var base = 'src/main/java/party/iroiro/juicemacs/elisp'

// One huge task to generate all sources
tasks.register("emacsGen") {
    description = 'Generate symbol/function definitions from Emacs source'
    doLast {
        exec {
            commandLine "${extractorDir}/.venv/bin/emacs-extractor", emacsSrc, '-o', 'extraction.json',
                    '-c', extractionConfig, '-f', extractionFinalizer,
                    '-g', file("${base}/runtime/ELispGlobals.java"),
                    '--buffer', file("${base}/runtime/objects/ELispBuffer.java"),
                    '--frame', file("${base}/runtime/internal/ELispFrame.java"),
                    '--kboard', file("${base}/runtime/internal/ELispKboard.java"),
                    '-C', file("${base}/forms/ELispBuiltInConstants.java"),
                    '-d', file("${base}/forms")
        }
    }
}
