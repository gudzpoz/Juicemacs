<?xml version="1.0"?>

<ruleset name="ELisp Cautions"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        Things to avoid in this subproject
    </description>

    <rule
            name="ELispAlwaysInterpretSpecialForms"
            language="java"
            message="Add CompilerDirectives.bailout(...) to special forms"
            class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            ELisp special forms return dynamically generated AST nodes and should always be interpreted.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ClassDeclaration
                [pmd-java:hasAnnotation("party.iroiro.juicemacs.elisp.forms.ELispBuiltIn")]
                [ModifierList/Annotation[@SimpleName="ELispBuiltIn"]/AnnotationMemberList/MemberValuePair[@Image="rawArg"]]
                /ClassBody/MethodDeclaration
                [pmd-java:hasAnnotation("com.oracle.truffle.api.dsl.Specialization")]
                [
                 not(Block/ExpressionStatement/MethodCall[@MethodName="bailout"])
                 or (not(ends-with(@Name, "Bailout")))
                ]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule
            name="ELispUseSignalForErrors"
            language="java"
            message="Use Emacs Lisp signal instead of throwing classic Java exceptions."
            class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Emacs Lisp signal is more appropriate for presenting errors.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ThrowStatement
                [./ConstructorCall/ClassType[
                @SimpleName="IllegalArgumentException"
                or @SimpleName="IOException"
                or @SimpleName="RuntimeException"
                ]]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispReduceCastExpressions"
          language="java"
          message="Instead of casting, check the type of the object and throw a meaningful error."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Emacs Lisp throws meaningful errors like "(wrong-type-argument expected-type actual-value)"
            instead of yielding a non-determinant error message in ClassCastException.
            Use utility functions to check and "cast" values instead of directly cast them.
        </description>
        <priority>5</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ClassDeclaration
                [./ExtendsList/ClassType[pmd-java:typeIs("party.iroiro.juicemacs.elisp.forms.ELispBuiltIns")]]
                //CastExpression
                [not (./PrimitiveType[@Kind="int" or @Kind="long" or @Kind="byte"])]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="TruffleNodeMissingExecuteVoid"
          language="java"
          message="Please implement executeVoid()."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Please implement executeVoid() (and consider implementing
            executeLong/executeDouble) in the node implementation.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //(
                  ClassDeclaration[pmd-java:typeIs("party.iroiro.juicemacs.elisp.nodes.ELispExpressionNode")]
                    | ConstructorCall[pmd-java:typeIs("party.iroiro.juicemacs.elisp.nodes.ELispExpressionNode")]
                      /AnonymousClassDeclaration
                )
                [./ClassBody
                  [./MethodDeclaration[@Name="executeGeneric"]]
                  [not (./MethodDeclaration[@Name="executeVoid"])]
                ]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="TruffleDoNotUseNull"
          language="java"
          message="Do not introduce null values into the code."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            We use Boolean.FALSE to represent nil values and expect
            no null value in code. Use false in place of null if you
            must.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //NullLiteral
                [not(ancestor::InfixExpression[@Operator=("==", "!=")])]
                [not(ancestor::*//Annotation[@SimpleName="Nullable"])]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule ref="party/iroiro/juicemacs/pmd/NoBoxedPrimitivesRule.xml"/>

    <!-- Best Practices -->

    <rule ref="category/java/bestpractices.xml/MissingOverride" />

    <!-- Some code styles -->

    <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
    <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode"/>
    <rule ref="category/java/codestyle.xml/BooleanGetMethodName"/>
    <rule ref="category/java/codestyle.xml/ConfusingTernary">
        <properties>
            <property name="ignoreElseIf" value="true" />
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>
    <rule ref="category/java/codestyle.xml/FieldNamingConventions"/>
    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
    <rule ref="category/java/codestyle.xml/LambdaCanBeMethodReference"/>
    <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryCast"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
    <rule ref="category/java/codestyle.xml/UnnecessarySemicolon"/>
    <rule ref="category/java/codestyle.xml/UseDiamondOperator"/>
    <rule ref="category/java/codestyle.xml/UseExplicitTypes"/>
    <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>
    <rule ref="category/java/codestyle.xml/UseShortArrayInitializer"/>
    <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals"/>

</ruleset>
