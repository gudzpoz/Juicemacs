<?xml version="1.0"?>

<ruleset name="ELisp Cautions"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        Things to avoid in this subproject
    </description>

    <rule
            name="ELispSpecialFormsImplementation"
            language="java"
            message="Implement SpecialFactory for special forms with a placeholder."
            class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Specializations for ELisp special forms should be merely placeholders.
            Implement SpecialFactory for them.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ClassDeclaration
                [pmd-java:hasAnnotation("party.iroiro.juicemacs.elisp.forms.ELispBuiltIn")]
                [ModifierList/Annotation[@SimpleName="ELispBuiltIn"]/AnnotationMemberList/MemberValuePair[@Image="rawArg"]]
                [not(pmd-java:typeIs("party.iroiro.juicemacs.elisp.forms.ELispBuiltInBaseNode.SpecialFactory"))
                 or
                 ./ClassBody/MethodDeclaration/ClassType
                 [pmd-java:hasAnnotation("com.oracle.truffle.api.dsl.Specialization")]
                 [not(pmd-java:typeIs("java.lang.Void"))]
                ]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule
            name="ELispUseSignalForErrors"
            language="java"
            message="Use Emacs Lisp signal instead of throwing classic Java exceptions."
            class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Emacs Lisp signal is more appropriate for presenting errors.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ThrowStatement
                [./ConstructorCall/ClassType[
                @SimpleName="IllegalArgumentException"
                or @SimpleName="IOException"
                or @SimpleName="RuntimeException"
                ]]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispReduceCastExpressions"
          language="java"
          message="Instead of casting, check the type of the object and throw a meaningful error."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Emacs Lisp throws meaningful errors like "(wrong-type-argument expected-type actual-value)"
            instead of yielding a non-determinant error message in ClassCastException.
            Use utility functions to check and "cast" values instead of directly cast them.
        </description>
        <priority>5</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ClassDeclaration
                [./ExtendsList/ClassType[pmd-java:typeIs("party.iroiro.juicemacs.elisp.forms.ELispBuiltIns")]]
                //CastExpression
                [not(
                  ./PrimitiveType[@Kind="int" or @Kind="long" or @Kind="byte"]
                  or ./ClassType[pmd-java:typeIs("java.lang.Object")]
                )]
                /*[2][pmd-java:typeIs("java.lang.Object")]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispDoNotUseEqualsToCompare"
          language="java"
          message="Instead of using Object::equals, use FEq::eq to avoid edge cases."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            In our interpreter, the t/nil values both have two representations:
            true (as a symbol) and Boolean.TRUE, nil (as a symbol) and Boolean.FALSE.
            The equality check is not reliable (e.g., Boolean.FALSE.equals(NIL) is false).
            Use FEq::eq to handle this correctly.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
               //MethodCall[@MethodName="equals"]
               [./*[1][pmd-java:typeIsExactly("java.lang.Object")]]
               [count(./ArgumentList/*)=1]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispConvertBooleansToSymbols"
          language="java"
          message="When using instanceof, remember to use toSym(...) to convert booleans over."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Boolean.TRUE/FALSE are treated as symbols in the interpreter.
            Remember to use toSym(...) to convert booleans over.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //InfixExpression[@Operator="instanceof"]
                [not(./MethodCall[@MethodName="toSym"])]
                [
                 ./TypeExpression/ClassType[@SimpleName="ELispSymbol"]
                 or
                 ./PatternExpression/TypePattern/ClassType[@SimpleName="ELispSymbol"]
                ]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispSwitchConvertBooleansToSymbols"
          language="java"
          message="When using switch pattern matching, remember to use toSym(...) to convert booleans over."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Boolean.TRUE/FALSE are treated as symbols in the interpreter.
            Remember to use toSym(...) to convert booleans over.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //SwitchStatement
                [not(./MethodCall[@MethodName="toSym"])]
                [./SwitchArrowBranch/SwitchLabel/TypePattern/ClassType[@SimpleName="ELispSymbol"]]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispNaNCompareTo"
          language="java"
          message="Use arithCompare(a, b) with bit masks for floating point equality checking."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            The method compareTo(a, b) imposes a total ordering, which is incompatible with
            IEEE 754 NaN values (since comparisons with NaN should always yield false).
            Use arithCompare(a, b) for correct floating point number handling, unless
            you are implementing sorting functions.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //MethodDeclaration//InfixExpression
                /MethodCall[count(./ArgumentList/*)=2][@MethodName="compareTo"]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispLeakedListBuilder"
          language="java"
          message="Please remember to call builder.build()."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Do not leak list builders to lisp code. Always call builder.build().
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ReturnStatement[not(./NullLiteral)]/*[1]
                [pmd-java:typeIs("party.iroiro.juicemacs.elisp.runtime.objects.ELispCons.ListBuilder")]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="ELispCannotDumpSourceSection"
          language="java"
          message="Store encoded integers instead of SourceSection in ELisp objects."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            During pdump, we serialize lisp objects and do not (or plan to) support
            serializing SourceSection objects. Implement LocationProvider and
            store an encoded integer instead.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //ClassDeclaration[pmd-java:typeIs("com.oracle.truffle.api.interop.TruffleObject")]
                //FieldDeclaration/ClassType[pmd-java:typeIs("com.oracle.truffle.api.source.SourceSection")]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="TruffleNodeMissingExecuteVoid"
          language="java"
          message="Please implement executeVoid()."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            Please implement executeVoid() (and consider implementing
            executeLong/executeDouble) in the node implementation.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //(
                  ClassDeclaration[pmd-java:typeIs("party.iroiro.juicemacs.elisp.nodes.ELispExpressionNode")]
                    | ConstructorCall[pmd-java:typeIs("party.iroiro.juicemacs.elisp.nodes.ELispExpressionNode")]
                      /AnonymousClassDeclaration
                )
                [./ClassBody
                  [./MethodDeclaration[@Name="executeGeneric"]]
                  [not (./MethodDeclaration[@Name="executeVoid"])]
                ]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule name="TruffleDoNotUseNull"
          language="java"
          message="Do not introduce null values into the code."
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            We use Boolean.FALSE to represent nil values and expect
            no null value in code. Use false in place of null if you
            must.
        </description>
        <priority>1</priority>
        <properties>
            <property name="xpath">
                <value><![CDATA[
                //NullLiteral
                [not(ancestor::InfixExpression[@Operator=("==", "!=")])]
                [not(parent::*[parent::MethodCall])]
                [not(ancestor::*//Annotation[@SimpleName="Nullable"])]
                [not(ancestor::*[pmd-java:typeIs("party.iroiro.juicemacs.elisp.forms.ELispBuiltInBaseNode.SpecialFactory")])]
                ]]></value>
            </property>
        </properties>
    </rule>

    <rule ref="party/iroiro/juicemacs/pmd/NoBoxedPrimitivesRule.xml"/>

    <!-- Best Practices -->

    <rule ref="category/java/bestpractices.xml/MissingOverride" />

    <!-- Some code styles -->

    <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedFieldInFinalClass"/>
    <rule ref="category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending"/>
    <rule ref="category/java/codestyle.xml/AvoidUsingNativeCode"/>
    <rule ref="category/java/codestyle.xml/BooleanGetMethodName"/>
    <rule ref="category/java/codestyle.xml/ConfusingTernary">
        <properties>
            <property name="ignoreElseIf" value="true" />
        </properties>
    </rule>
    <rule ref="category/java/codestyle.xml/ControlStatementBraces"/>
    <rule ref="category/java/codestyle.xml/FieldNamingConventions"/>
    <rule ref="category/java/codestyle.xml/IdenticalCatchBranches"/>
    <rule ref="category/java/codestyle.xml/LambdaCanBeMethodReference"/>
    <rule ref="category/java/codestyle.xml/PrematureDeclaration"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryCast"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
    <rule ref="category/java/codestyle.xml/UnnecessarySemicolon"/>
    <rule ref="category/java/codestyle.xml/UseDiamondOperator"/>
    <rule ref="category/java/codestyle.xml/UseExplicitTypes"/>
    <rule ref="category/java/codestyle.xml/UselessQualifiedThis"/>
    <rule ref="category/java/codestyle.xml/UseShortArrayInitializer"/>
    <rule ref="category/java/codestyle.xml/UseUnderscoresInNumericLiterals"/>

</ruleset>
