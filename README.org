#+title: Juicemacs - An absolutely-not-solid Emacs implementation

[[https://justforfunnoreally.dev][https://img.shields.io/badge/justforfunnoreally-dev-9ff.svg]]
[[https://openjdk.org/projects/jdk/23/][https://img.shields.io/badge/Java-23-orange.svg?logo=openjdk&ext=.svg]]

Juicemacs is a work-in-progress Emacs implementation +just for the fun of it+
that over-ambitiously aims to achieve the following:

- Transparent(-ish) concurrentization of ELisp code
- Polyglot programming with Python, JavaScript, etc.
- GNU Emacs 30 compatibility

Java helps to make all these possible, for it runs on JVM, which happens to be a
platform with several nice things:

- A decent GC: HotSpot has a number of state-of-the-art GCs.
- Green threads & OS threads: One without the hassle of function coloring.
- An incredible JIT framework: [[https://www.graalvm.org/latest/graalvm-as-a-platform/language-implementation-framework/][Truffle]] lets you build an interpreter and a JIT
  compiler all at once.

Of course using Java brings in its own problems, which this project will need to
live with:

- Sloooow startup (and with Truffle, it actually needs two warm-ups)
- It bloats (and we can only hope Project Valhalla somehow tackles that)

* Running

It is still a long long way to go before Juicemacs can load all of =loadup.el=.
Currently it stops at the last few lines trying to run =top-level= due to
missing UI subroutines. But it can already use a lot of functions/macros loaded
in the "upper half" of =loadup.el=.

To run it:
1. Make sure to have JDK 23 installed (preferably [[https://github.com/graalvm/graalvm-ce-builds/releases/][graalvm-ce]]).
2. Go to [[file:elisp/emacs/]] and build a GNU Emacs to have all the generated
   data/elisp files ready.
3. Delete/rename the generated =lisp/loaddefs.el= file.
4. Run =sh -c "cd app && $(./gradlew -q :app:jvmCmd)"= (in the project root) for
   a REPL.

By the way, you may also try:
- =sh -c "cd app && $(./gradlew -q :app:jvmCmd) --help"=
- =sh -c "cd app && $(./gradlew -q :app:jvmCmd) --inspect 4242"= (for a [[https://www.graalvm.org/latest/tools/chrome-debugger/][Chrome
  DevTools protocol server]])

** ERT Testing

Emacs comes with a unit-testing toolkit, Emacs Lisp Regression Testing (ERT),
and has a bunch of ELisp tests in its source repository (=./test/src/=).
Juicemacs currently can run some of these tests [[file:elisp/src/test/java/party/iroiro/juicemacs/elisp/ELispLanguageTest.java][with a bit of workaround]]:

#+begin_src elisp
  ;; TODO: pp requires a bunch of sexp parsing functions
  (require 'pp)
  (defalias 'pp 'princ)
  ;; ert asserts about newlines produced by pp
  (defun cl-assert (&rest _) t)

  (require 'ert)
  (load "../test/src/data-tests")
  (ert-run-tests-batch)
  (null (ert-run-tests-batch)) ; don't print the huge info object
#+end_src

You're welcome to try the tests and report any failing cases! (I think many of
them might simply throw an =UnsupportedOperationException= since they are yet to
be implemented.)

* Documentation

- [[file:elisp/README.org]]: Documenting the structure of the ELisp interpreter
- [[file:commons/piece-tree/README.org]]: Introduction to a [[https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation][piece tree]]
- [[file:docs/Notes.org]]: Reading list and notes for implementing this Emacs clone
- [[file:docs/Bytecode.org]]: Extracting (part of) the Emacs bytecode specs from
  Emacs
- [[file:docs/TODO.org]]: TODO list & DONE list, tracking current/solved challenges

* Similar projects

- https://github.com/remacs/remacs

- https://github.com/CeleritasCelery/rune

- https://github.com/federicotdn/pimacs

- https://codeberg.org/ramin_hal9001/gypsum

- [[https://www.cliki.net/cl-emacs][CL-Emacs]]: “Various people have proposed an emacs-like editor written in Common
  Lisp. This page collects together a few possibilities.”

- Also the discontinued [[https://jemacs.sourceforge.net/][JEmacs - the Java/Scheme-based Emacs Text Editor]] (source
  @ [[https://gitlab.com/kashell/Kawa/-/tree/master/gnu/jemacs?ref_type=heads][GNU Kawa]])

* Disclaimers

By calling this project Juicemacs, I do mean that:

- It does not aim to become a solid implementation (yet).
- It is not bug-free ([[https://www.fda.gov/food/current-good-manufacturing-practices-cgmps-food-and-dietary-supplements/food-defect-levels-handbook][~5 Drosophila eggs per 250 ml]]).
