#+title: TODO

* TODO [#A] =let/let*= Buffer Local Logic

So, old Emacs had a bug:

#+begin_src elisp
  (let ((buffer-file-name "/home/rms/.emacs"))
    ;; ...
    (set-buffer other-buffer)
    ;; ...
    )
#+end_src

It seems... we also have this bug.

* TODO [#A] More robust code generation

* TODO [#A] Re-consider whether to stay =static= everywhere

Currently, we heavily use =static= variables and basically everything is
global. This is the Emacs way: single threaded, globally dynamically bound.
However, this has already posed a few challenges:

- Truffle assumes the language allows several parallel contexts, that is, we can
  execute =i = 1; print(i)= and =i = 2; print(i)= concurrently without them
  interfering with each other. Apparently, our "global state for everything"
  approach can be problematic.
  - Previously, before we auto-gen the giant mess of initialization code, since
    JUnit tests are not concurrent, we are mostly fine, as long as we clean
    things up when creating a new context.
  - Now that we have convoluted init logic, with global variables scattered
    around the place, it becomes harder to properly "clean things up". (The
    tests are now failing with tons of =(fatal)= errors, probably due to charset
    initialization.)

- Although we plan to follow JavaScript's model of concurrency:
  single-OS-threaded green threads, it will be nice to have real thread APIs,
  similar to the Web Worker API. Then, it will be necessary to separate the
  dynamic variable scope of different "workers".

** Considerations

- Web Worker API: The more intuitive way is to have multiple instances of the
  ELisp interpreter. However, we need to think twice before doing so:

  We want, for example, =defun= and others to be available to the worker. If we
  use multiple interpreters, we will need to =(load "loadup.el")= every time a
  worker is created. This won't be realistic before we can do pdump in Java.

- Sharing anything between workers: unwise. Consider the following function:

  #+begin_src emacs-lisp :tangle yes
    (defun self-modifying-f (value)
      (let ((inner '(nil)))
        (setcar inner value)))
  #+end_src

  Concurrent calls to it will results in race conditions. Rune handles it by
  copying and marking the whole AST immutable, which results in behavioural
  discrepancies.

- Actually, if we ignore the rare case that the AST is directly mutated, we
  might be able to use a auto-copying =ELispObjectLiteralNode= for this: when it
  is accessed, it copies the original value and use it for further access for
  the current OS thread.

  If we are to prevent the user from modifying the AST, we can also copy the AST
  tree for internal usage, and ignore any modification to the original object.

** Multi-context, multi-worker, multi-threaded ELisp refactor

Scopes:
- =TruffleLanguage=
  - Multiple context objects
    - Multiple workers
      - Multiple virtual threads mounted on a single carrier thread

Shared objects:
- Symbols: shared across contexts, stored in =ELispLanguage=, following what
  TruffleRuby is doing.
- Functions: across workers, but not contexts. Shallow-copied when shared.
- Values: across workers, but not contexts. Deep-copied when shared.

Since symbols are shared across contexts, to get its corresponding
value/function, we must look it up in a context/worker-local map. This has
notable performance penalty: we don't want to look up a map for every variable
access. A usual mitigation to this is to cache the value container objects, but,
..., it can be hard to do so since we have multiple workers sharing the same
function.

** TODO Progress [1/3]

- [X] Move global things to fields in =ELispGlobal=

  - [X] Symbols, generated forward value containers

  - [X] Various =static= fields in =BuiltIn*= classes

- [-] Optimize

  - [ ] Use get contexts with =ELispContext.get(this)=

  - [-] Read/write to global values with some =ReadGlobalNode=

    - [X] Read

    - [ ] Write?

  - [ ] Cache constant globals

    - [ ] Keywords

    - [ ] Constants

  - [ ] Maybe use a =ContextThreadLocal= for current buffer tracking

  - [ ] Automatically free container objects when the corresponding symbol goes
    out of scope

- [ ] Make tests pass again

*** Why sharing symbols & functions?

**** Symbols

We heavily use ==== comparisons for symbols in our builtin functions, and it
would be a pain if we switch from =if (sym == EQ)= to =if (isInterned(sym) &&
sym.name().equals(new MuleString("eq")))= (and the latter also has poor
performance).

**** Functions

A huge part of the ELisp we are familiar with are implemented in ELisp. For
example, both =defun= and =defmacro= are written in ELisp code. If we don't
share functions, each worker must run =loadup.el= independently, which is slow.

Also, under Truffle, since functions are JIT-compiled, starting anew means
having to JIT-compile the functions again every time a new worker is started.

An alternative to consider is to not support workers at all, but it is really
/nice-to-have/.

*** Value container caching in shared functions

To make shared functions possible, we need automatical deep-copies of shared
values, including function objects as well as all kinds of global objects and
literals.

* TODO [#A] Initialization logic & ordering

The initialization logic of Emacs is quite complex. Basically:

- Every =.c= file may contain a =syms_of_<part>= that contains the definition of
  the symbols, variable initialization logic that this file manages.
- Some may contain an =init_<part>= function that is called initialize...
  things.
- Some may contain multiple =init_<part>_<wut>= functions that contains
  initialization instructions that must be run separately due to
  interdependencies between all those initialization logic.

The =main= function in =emacs.c= contains a dazzling amount of initialization
code. (Search for =init_alloc_once= to start reading.) Thank you, Emacs
developers for all those helpful comments around the init function calls. But,
no, I would really want to avoid all these complex dependencies between code
"modules".

The question is: is simplifying all this "mess" ever possible or the Emacs
=main= initialization is the best we can get?

(One thing that comes to mind is dependency injection or inversion of control.
But I'm afraid that the dependencies are not that simple or that OOP-friendly.)

* TODO [#B] Make functions mutable

Currently in GNU Emacs 29, a function may be a =lambda/closure= cons:

#+begin_src elisp :results value code
  ;;; -*- lexical-binding: t -*-
  (defalias 'my-func #'(lambda () 42))
  (symbol-function 'my-func)
#+end_src

#+RESULTS:
#+begin_src elisp
(lambda nil 42)
#+end_src

With lexical binding, you will get =(closure (t) nil 42)= instead of =(lambda
nil 42)=.

Since it is a cons, you may modify it to change the function definition on the
fly. For the GNU Emacs interpreter, since it literally evaluates the cons, it is
fine. But for Truffle interpreters, which usually wants a static AST for better
JIT performance, this is bad news.

Currently, we don't bother checking whether each AST node needs update and the
function may be considered immutable once the whole AST is constructed. (One
exception is that we check at each cons node =(maybe-function arg1 ...)= whether
the target function is changed so as to handle subroutines, functions as well as
macros.) Also, with our interpreter, =(function (lambda ()))= produces =<a
closure object>= instead of a cons, which is another behavioral difference.

The current performance is pretty good and we might consider adding more checks
to ensure a consistent behavior. But we will need some benchmark to ensure it
does not slow down too much.

* TODO [#B] Understanding Non-Bare Symbols

I hope we can make all symbols bare.

* TODO [#B] Autoload

So basically one can have autoload functions as well as autoload strings
(docstrings). What else?

- [ ] So we now handles autoload functions. However, the generated =loaddefs.el=
  seems to invoke =rx= before its autoload definition. How does Emacs even
  support this?
- [ ] Emacs autoload reads and sets several variables and supports undoing the
  loaded changes... How? (It seems related to feature unloading.)

* TODO [#B] Threading preparations

- Limit =jdk.virtualThreadScheduler.parallelism= to =1=.

* TODO [#B] Charsets & Coding

Emacs MULE.

The most significant properties of charsets seem to be:

- Mapping between byte-sequence and character code
- Mapping between character code and Unicode codepoint

The mappings are stored in files generated from glibc charset data files.

See also:

- [[file:~/Workspaces/Java/JVMacs/elisp/emacs/etc/charsets/README][../elisp/emacs/etc/charsets/README]]
- [[file:~/Workspaces/Java/JVMacs/elisp/emacs/admin/charsets/][../elisp/emacs/admin/charsets]]
- [[https://man7.org/linux/man-pages/man5/charmap.5.html][=man 5 charmap=]]
- [[https://man7.org/linux/man-pages/man7/charsets.7.html][=man 7 charsets=]]

** TODO Emacs Code Conversion Language (CCL)

https://news.ycombinator.com/item?id=42207282

https://emacsninja.com/posts/code-conversion-language.html

* TODO [#C] Keymaps

I now know there are sparse maps and dense ones, and they nest. And keymaps are
index by character codes most of the time. However, I have seen it indexed with
=[t]=. No idea what it is all about.

Edit: See comments in =BuiltInKeymap.java= for what keymap is about.

- [ ] Default values
- [ ] Auto-convert a sparse one to a dense one like Emacs (when?)
- [-] =map-keymap=
  - [X] =map-char-table=

* TODO [#C] =module-info.java=

IntelliJ always complains about =org.graalvm.truffle= not being read by
=module-info.java=, despite the fact that the =require= line the line is there.
([[https://youtrack.jetbrains.com/issue/IDEA-362046/Multi-release-module-info.class-causes-false-positive-errors][IDEA-362046]])

* TODO Buffers

It is still a long long way to go... But at least we have a piece table now. I
might still need to look into CRDTs and the new Eg-walker if we want to merge
buffers from different (virtual) threads.

* Trackers

** Language [4/6]

- [X] Emacs Lisp reader (lexer & parser)

- [X] Buffer-local variables & scoping

  Basically, in addition to buffer-local variables, forwarded variables, etc.,
  we want to add transparent "thread-local" variables, so that:

  - Dynamically bound variables are thread-local, during the lifetime of which
    other threads sees the original value.
  - Some specific variables must be thread-local to make transparent
    concurrentization work.
  - Also, lexical scopes are always thread-local.

  - [X] Handle default values

- [X] All special forms

- [ ] Bootstrap =loadup.el=

- [X] A fallback, feature-complete regex engine -> no

- [ ] Emacs Lisp byte-code interpreter in Truffle


** Types [5/6]

Hopefully we don't need to take too much effort to implement these tons of
types. We might need some boilerplate code for strings / integers for Truffle
interop, but otherwise simply using some classes with public member should do.

- [X] =Lisp_Symbol=

  - Constant marker
  - Intern state
  - Special?

  - Name

  - Value (cache)

    - Types:
      - Plain var
      - Varalias
      - Localized var (buffer local variables)
      - Forwarding variable

  - Function value (cache)

  - Property list

- [X] =Lisp_Int*=

- [X] =Lisp_String=

- [-] =Lisp_Vectorlike= [12/36]

  - [X] =PVEC_NORMAL_VECTOR=
  - [ ] =PVEC_FREE=
  - [X] =PVEC_BIGNUM=
  - [ ] =PVEC_MARKER=
  - [ ] =PVEC_OVERLAY=
  - [ ] =PVEC_FINALIZER=
  - [X] =PVEC_SYMBOL_WITH_POS= (maybe integrate into =ELispSymbol=)
  - [ ] =PVEC_MISC_PTR=
  - [ ] =PVEC_USER_PTR=
  - [ ] =PVEC_PROCESS=
  - [ ] =PVEC_FRAME=
  - [ ] =PVEC_WINDOW=
  - [X] =PVEC_BOOL_VECTOR=
  - [X] =PVEC_BUFFER=
  - [X] =PVEC_HASH_TABLE=
  - [X] =PVEC_OBARRAY=
  - [ ] =PVEC_TERMINAL=
  - [ ] =PVEC_WINDOW_CONFIGURATION=
  - [X] =PVEC_SUBR=
  - [ ] =PVEC_XWIDGET=
  - [ ] =PVEC_XWIDGET_VIEW=
  - [ ] =PVEC_THREAD=
  - [ ] =PVEC_MUTEX=
  - [ ] =PVEC_CONDVAR=
  - [ ] =PVEC_MODULE_FUNCTION=
  - [ ] =PVEC_NATIVE_COMP_UNIT=
  - [ ] =PVEC_TS_PARSER=
  - [ ] =PVEC_TS_NODE=
  - [ ] =PVEC_TS_COMPILED_QUERY=
  - [ ] =PVEC_SQLITE=
  - [X] =PVEC_CLOSURE=
  - [X] =PVEC_CHAR_TABLE=
  - [X] =PVEC_SUB_CHAR_TABLE=
  - [X] =PVEC_RECORD=
  - [ ] =PVEC_FONT=
  - [ ] =PVEC_TAG_MAX=

- [X] =Lisp_Cons=

- [X] =Lisp_Float=


* Considered Done (For Now)

** DONE [#B] Optimize lexical variable access

*** Step One: Use assumptions instead of checking at every access

For simple functions, the stack slot number assign to each variable is constant
and we do not need to check for changes every time.

The step introduces for each root node an assumption that stays true as long as
the materialized top is not changed: slot numbers are indead constant.

*** Step Two: Optimize conditions for assumption invalidation

It is possible that a portion of the stack is materialized and yet the slot
numbers do not change:

#+begin_src elisp
  (let ((a 1)                ; a: slot #1
        (f #'(lambda () a))) ; <- frame materialized as the lexical context, f: slot #2
    (while (< 0 (funcall f))
      (let ((b -1))          ; even when the stack is materialized, b is always at slot #3
        (setq a b))))
#+end_src

So we want to differentiate the case above with the following:

#+begin_src elisp
  (dolist (v '(1 2 3))
    (let ((vv (* v v)))  ; <- we have three "vv"s, at slot #1, #2 and #3
      #'(lambda () vv)))
#+end_src

The changes required are actually quite simple: instead of root nodes, we
introduces assumptions at each =let/let*= scope.

The assumption is invalidated when:

- The frame is materialized.
- The scope is entered the second time, with a different =materializedTop=.

The changes bring down the execution time of =mandelbrotNestedLets= from 2.2s to
0.5s (i.e. from 55x Java to 14x Java). (BTW, =mandelbrot= (with a single huge
=let=) is around 3x Java.)

** DONE [#A] Strings & Buffers (Step 1)

For string processing in any language, I suppose there are always at least two
kinds of offsets: char offsets & code point offsets. Emacs basically uses byte
offsets and codepoint offsets, but Java uses UTF-16 char offsets and codepoint
offsets. So to correctly handle strings in Juicemacs, we need to incorporate all
these three kinds of offsets.

It could be easier if we could just follow Emacs. (And Truffle actually provides
a byte-offset based =TruffleString= to free us of the trouble!) But,
unfortunately, we can't. There is one indispensible Java API we need to use:
Java =Pattern= regex, which, of course, is based on UTF-16 char offsets.

Edit: In order to support the widened code point range in Emacs, we are now
rolling out our own string implementation. The good news is that, many Emacs
string operations actually involves case tables and all, requiring a
reimplementation of most of the =java.lang.String= API anyway. So why not?

*** DONE [#A] RegExp

Well, the conclusion is that we need to implement a new RegExp runtime. :) See
=ELispRegExp.java=.

**** Thoughts

Truffle also provides a JIT-compiling RegExp runtime (TRegex). But we still need
to experiment whether it is compatible with Emacs Lisp RegExps.

| RegExp Features   | ELisp               | Java        | TRegex |
|-------------------+---------------------+-------------+--------|
| Named capture     | No                  | Yes         |        |
| =.=               | Codepoint           | Codepoint   |        |
| =*=, =*?=         | /well-known/        | ✅          |        |
| =+=, =+?=         | /well-known/        | ✅          |        |
| =?=, =??=         | /well-known/        | ✅          |        |
| =[...]=, =[^...]= | Char classes        | ✅          |        |
| =[:char-class:]=  | Named char classes  | =\p{class}= |        |
| =^=               | Start of line       | ✅          |        |
| =$=               | End of line         | ✅          |        |
| =\\vert=          | Alternation         | ✅          |        |
| =\{m,n\}=         | Postfix operator    | ✅          |        |
| =\(...\)=         | Capturing group     | ✅          |        |
| =\(?:...\)=       | Non-capturing       | ✅          |        |
| =\(?num:...\)=    | Explicitly numbered | ❌          |        |
| =\digit=          | Back-reference      | ✅          |        |
| =\w=              | Word constituent    | ✅          |        |
| =\W=              | Non word            | ✅          |        |
| =\scode=          | Char syntax         | ❌          |        |
| =\Scode=          | Not char syntax     | ❌          |        |
| =\ccode=          | Char category       | ❌          |        |
| =\Ccode=          | Not char category   | ❌          |        |
| =\`=              | Start of string     | =\A=        |        |
| =\'=              | End of string       | =\z=        |        |
| =\==              | Buffer point        | ❌          |        |
| =\b=              | Word boundary       | ✅          |        |
| =\B=              | Not word boundary   | ✅          |        |
| =\<=              | Start of word       | ❌          |        |
| =\>=              | End of word         | ❌          |        |
| =\_<=             | Start of symbol     | ❌          |        |
| =\_>=             | End of symbol       | ❌          |        |

Now that we have our own =MuleString=, I don't think using TRegex is worth the
cost any more.

** DONE [#B] =obarray=

Oh no. It looks like a data structure with its internal structure /fully
exposed/ as a vector. It probably means we will /have to/ exactly follow the GNU
Emacs implementation.

Edit: No, it is not fully exposed. (See keymaps for what is fully exposed...
Sigh.) It is a hash-table-ish thing. And actually, I do think we can make all
/hashes/ zeros and use our own =HashMap= instead.

** CANCELLED Syntax tables & case tables

It seems basically a char table. However, in order to use it with RegExp, we will need to
maintain a character set for each syntax class, which might take quite some memory if unoptimized.

Edit: task cancelled now that we have a dedicated regex engine.

** DONE [#C] Code conventions

- Maybe set =ELispContext.NIL= to =Boolean.FALSE= (and =T= to =Boolean.TRUE=).

- [X] =elisp/scripts/extract-emacs-src.py=

  - Auto-detect types
  - Avoid java keywords
  - Auto-update existing ones
  - Set generated return types to =Void=

- Analyze =null= values during initialization

** DONE [#A] Signals

A central mechanism to handle exceptions.

I guess I should start implementing it before I litter
=IllegalArgumentException= everywhere.

- [X] New exception types & utility methods

- [X] =signal/error/condition-case=

  - [X] Implementation

  - [X] Error groups

  - [X] Convert =ClassCastException= to errors

- [X] =catch/throw=

- [X] Stack traces

  - [X] Store debug info into cons nodes.

  - [X] So we want function names in stack traces, but all interpreted functions
    are just lambdas in Emacs: =(defalias 'a-symbol #'(lambda () ...))=. Maybe
    we can try to assign a lambda a name when it is first bound to a symbol? (<-
    chose this approach)

    +I will need to check out how GraalJs handles lambdas.+ Too lazy to do that.

** DONE [#B] Replace lexical scope maps with Truffle frames

- Threefold speed-up: =(fib 35)= went from ~5s to 1.7s. At least we are not
  slower than interpreted GNU Emacs now (~3s).
  - Any other languages I tested takes less than an instant.
  - Python 3.12 takes ~0.6s. So it is quite embarrassing that a JIT
    implementation cannot beat an interpreted language.
    - JMH results: =~0.4 s/op=, probably jacoco is interfering with previous
      results.
    - But... =(mandelbrot 750)= takes around 5.5s while Python uses only a
      second. So there is definitely space for improvement. (Emacs: ~30s.)
- [[http://cesquivias.github.io/blog/2015/01/08/writing-a-language-in-truffle-part-3-making-my-language-much-faster/#direct-lookup-to-lexical-scope][Writing a Language in Truffle. Part 3: Making my Language (Much) Faster]]

*** Reusing frame slots

Basically, each Truffle function automatically gets its own =VirtualFrame=, and
for each lexical scope (either in a function or a =let/let*= scope), we manually
assign a =ELispLexical= scope.

Lexical scopes are append-only and keeps track of mappings between variables in
the current scope and their frame slots. When the current lexical scope is
materialized (when a lambda function is created inside it, for example), it
marks the corresponding frame materialized. However, instead of treating all
frame slots as not reusable slots, it makes use of a =materializedTop= slot to
track what slots that lambda function might have access to, allowing slots
beyond those slots to be reused.

** DONE [#A] Undertanding =Lisp_Symbol= (Variables)

I really doubt I get the implementation of =ELispSymbol= wrong (to some degree).
Basically, a =symbol= can:

- Contain a lisp value (plain value symbol)
- Point to a field in a global C struct (forward symbol)
- Point to a field in a buffer struct (buffer-local symbol)
- Contain a user-defined buffer-local symbol (buffer-local symbol)
- Point to another symbol (aliased symbol)

Also, similar to Java, lisp functions and values are in different "namespaces".
So in the function namespace, a =symbol= can:

- Point to a C function
- Point to a lisp function
- Point to another symbol (aliased function)
- Other special values:
  - Macros
  - Autoload functions
  - Wait, what? A keymap?
- Other values set by =defalias=

I have no idea how all these things interacts. (For example, what happens when
you try to set the buffer-local default value for a plain value symbol? What if
it is lexically bound? What behaviors may change if a symbol is lexically bound?)

(Did I forget to mention that symbols like =:keyword= are automatically
constant? Or are they? They also seems to evaluate to themselves.)

*** Lexical Scoping

#+begin_quote
Note that unlike dynamic variables which are tied to the symbol object itself,
the relationship between lexical variables and symbols is only present in the
interpreter (or compiler). Therefore, functions which take a symbol argument
(like ‘symbol-value’, ‘boundp’, and ‘set’) can only retrieve or modify a
variable’s dynamic binding (i.e., the contents of its symbol’s value cell).

=C-h i g= =(elisp) Lexical Binding=
#+end_quote

Oh. Great.

*** DONE =defvar=

#+begin_quote
If INITVALUE is missing, the form marks the variable "special" locally (i.e.,
within the current lexical scope, or the current file, if the form is at
top-level).
#+end_quote

Mind-boggling. No idea. (And why? Is it just fun to change the whole semantics
depending on a single missing parameter?)

*** DONE =let= and =let*=

Dynamic binding not handled yet. Also, still need to handle "special == true"
symbols under lexical scoping.

Wait. Does "special == true" also applies to function arguments? (No.)
