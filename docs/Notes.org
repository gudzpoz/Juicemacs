#+title: Notes To Myself

Notes to myself while designing this project and scheduling TODO entries,
i.e., How To Implement Your Own Shitty Emacs.

* Notes

** Truffle Options

During performance testing, I found the following options (supplied to =Context=
builders) quite useful:

#+begin_src text
  .allowExperimentalOptions(true)
  .option("engine.TraceCompilation", "true")
  .option("engine.CompilationFailuReaction", "Diagnose")
  .option("engine.SpecializationStatistics", "true")
  .option("compiler.TraceMethodExpansion", "truffleTier")
#+end_src

- =SpecializationStatistics= requires something like:

  #+begin_src groovy
    tasks.withType(JavaCompile) {
        options.compilerArgs += '-Atruffle.dsl.GenerateSpecializationStatistics=true'
    }
  #+end_src

** Emacs

*** Emacs Lisp Problems

So special forms in Emacs Lisp is actually "special" ordinary functions,
which means... one can overwrite them or assign them to other symbols.
So this means you cannot convert a lisp cons =(my-func (func?))= to an AST
until you evaluate it.

- For a normal function, the above may expand to =FuncCallNode[my-func,
  FuncCallNode[func?]]=.
- For special forms..., like =(defalias 'my-func 'quote)=, it becomes
  =FuncCallNode[my-func, LispObject[(func?)]]=.

It makes it hard to cache the =CallTarget= used by Truffle. Also, since a
function can be a macro that yields dynamic AST, I don't think it is actually
possible to Truffle-JIT this thing efficiently... So bytecode it is.

P.S. The current interpreted AST node =ELispInterpretedNode.java= somehow
manages to produce an AST-ish thing for Truffle to JIT-compile. It is probably
not that efficient though. Read the code and comments for more details.

**** Efficient local variable lookup

Most Truffle languages store local variables on frames (=VirtualFrame=). There
are some optimizations with this approach:

- Truffle can optimize many things for you by inlining and placing things on a
  real stack after JIT-compilation.
- Nodes for reading and setting variables can cache the location of a specific
  variable, yielding better performance.
- Lexical scopes are now materialized frames, which Truffle is aware and can
  potentially optimize/inline away the cost.

However, as always, Emacs Lisp brings some problems:

- Most languages use static analysis to map variable names to their slot number.
  Static analysis ensures the slot numbers do not change between calls and is
  safe to cache.

  #+begin_src js
    function f(
      a,  // slot#0
      b,  // slot#1
    ) {
      const c = 0;  // slot#2
      if (a) {
        let d = 1;  // slot#3
        b += d + a;
      }
      let e = c + b;  // slot#4 or slot#3 if reusing slots
      return e;
    }
  #+end_src

- As for ELisp, well, you cannot do /static/ analysis with a /dynamic/ AST.

  #+begin_src elisp
    (defun f (a  ;; slot#0
              b  ;; slot#1
              )
      (some-macro
       ;; the slot of `c' depends on the expansion result of `some-macro'
       (let ((c 1)))))
  #+end_src

  Alternatively, similar to how we handle things in =ELispInterpretedNode.java=,
  we may dynamically assign slot numbers and cache at runtime instead. However,
  Truffle =FrameDescriptor= requires a constant slot count at declaration time,
  which poses yet another challenge.

Solutions?

- Use a constant slot count (=~32=) for frame descriptors. And spill to a
  separate =ArrayList= if there are too many variables.

- Keep static analysis stats on the stack frame:
  - Slot #0: =LexicalFrame=
    - Keeping track of occupied frame slots, symbol-to-slot-number mappings
      - Slot numbers: positive: local variable; zero or negative: argument
    - Parent frame reference
    - Whether the current frame is materialized: We can (only) reuse slots when
      the frame is not yet materialized (most helpful with =let= blocks in
      loops).
  - Slot #1: Frame spill =ArrayList= slot
  - Other slots: ordinary value slots

- Future enhancements (or are they?):
  - Track required slot counts for each function and try to pre-allocate (or
    shrink stack size) for the following calls.
    - Using =8= instead of =32= as the slot count does seem to affect throughput
      though.
  - Benchmark to find more hotspots (possibly in assembly).

*** The Graal Truffle tutorial series by Adam Ruka

#+begin_src js
  var absFuncRootNode = new FunctionRootNode(
    this,
    AbsFunctionBodyExprNodeGen.create(new ReadFunctionArgExprNode(0)),
  );
  context.globalScopeObject.newConstant(
    "Math.abs",
    new FunctionObject(absFuncRootNode.getCallTarget()),
  );
#+end_src

Basically:

- =FunctionCallExprNode= evaluates all its children and dispatches the call with
  =FunctionDispatchNode=, which uses a =DirectCallNode= to call a
  =FunctionObject=.
- =Math.abs= is a =FunctionObject= which is simply a wrapper for a =CallTarget=,
- The =CallTarget= is obtained from a =RootNode= subclass (=FunctionRootNode=),
  which is wrapped around a function body node (=AbsFunctionBodyExprNode=
  extending =EasyScriptExprNode=).
- =AbsFunctionBodyExprNode= uses =ReadFunctionArgExprNode= as a child node
  to read parameters from the =VirtualFrame=.
- =@GenerateNodeFactory= is used to ease writing more built-in functions.

** Truffle Function Calls

It is quite hard to gather all the details needed to build an efficient function
call system in Truffle. Basically, we want:

1. Built-in functions with less boilerplate code
2. Support for user-defined functions
3. Fixed args, optional args and varargs
4. Efficiency

And we need the following mechanism:

1. Global/local variable dereferencing for named function calls
2. Vararg parameter passing
3. Fixed arg parameter passing optimization

We will try to first follow a tutorial and then look into how some official
implementations do this.

*** SimpleLanguage - Official Implementation #1

Its approach is quite similar to the previous tutorial:

- =SLInvokeNode= corresponds to function call AST node.
  It uses =InteropLibrary= to dispatch calls though.
- =SLFunctionRegistry=: Maps function names to =SLFunction= objects.
- =SLFunction= wraps a =RootCallTarget=.
- =SLPrintlnBuiltin= extends =SLBuiltinNode= (which has the
  =@GenerateNodeFactory= annotation and extends =SLExpressionNode=).
- Built-in functions are registered by =SLContext::installBuiltins=, which in
  turn calls =SLLanguage::lookupBuiltin= to setup =SLReadArgumentNode= and
  functions.
- Notably, it seems to use a =CyclicAssumption= to detect call target changes.

*** GraalJs

- =JSFunctionCallNode= has a internal function object cache.
- No =@GenerateNodeFactory= is used. Global functions are setup with
  =JSRealm::setupGlobals= with hand-written function lists.
- =JSFunction= wraps (deeply) a =CallTarget=.
- Notably, =JSFunctionCallNode= implements a rather complex caching logic in its
  =executeAndSpecialize= function.

*** GraalPython

- The built-in functions in GraalPython show-case an advanced (undocumented?)
  usage of =@GenerateNodeFactory=:

  It seems that, when annotating inner classes with =@GenerateNodeFactory=,
  the DSL processor will also generate a factory for the outer class,
  containing a =getFactories()= method returning all the inner factories.
  This can be extremely convenient for writing and loading built-in
  functions in batch.

* Reading List

** Emacs

There are quite a lot Emacs forks or re-implementations out there, with helpful
comments and discussions.

- [[https://www.cliki.net/cl-emacs][CL-Emacs]]: “Various people have proposed an emacs-like editor written in Common
  Lisp. This page collects together a few possibilities.”

- [[https://jemacs.sourceforge.net/][JEmacs]]: The Java/Scheme-based Emacs Text Editor (source @ [[https://gitlab.com/kashell/Kawa/-/tree/master/gnu/jemacs?ref_type=heads][GNU Kawa]])

- [[https://github.com/remacs/remacs][remacs]]: Emacs fork with some ELisp builtin functions rewritten in Rust

- [[https://github.com/CeleritasCelery/rune][Rune]]: Emacs (mainly ELisp) reimplementation in Rust

*** Emacs Lisp

- [[https://www.emacswiki.org/emacs/HackerGuide][EmacsWiki: Hacker Guide]]

- [[https://github.com/remacs/remacs/wiki/Emacs-Types][Emacs Types - remacs Wiki]]

- [[https://blog.csdn.net/ftuc5dn/article/details/135421777][emacs 源码分析（二）]]: Contains a pretty diagram for some structs

- [[https://github.com/remacs/remacs/issues/499][Emacs internal string encoding - remacs Issue #499]]

- [[https://github.com/emacs-mirror/emacs/blob/46f3452b30f39a69f610faab58c1490b34dd367d/src/lread.c#L3936][read0 @ src/lread.c]]: The Emacs Lisp S-expr lexer & parser

- [[https://chrismennie.ca/EMACS-Conceptual-Architecture.pdf][[PDF] Conceptual Views of EMACS's Architecture - chrismennie.ca!]]

- [[https://github.com/CeleritasCelery/rune/blob/master/src/bytecode.rs][bytecode.rs @ rune]]

- [[https://rocky.github.io/elisp-bytecode.pdf][[PDF] GNU Emacs Lisp Bytecode Reference Manual]] ([[https://github.com/rocky/elisp-bytecode][TeX source here]])

*** GUI

- [[https://github.com/CeleritasCelery/rune/issues/61][discussion about display engine and GUI model of emacs - rune Issue #61]]

- [[http://www.finseth.com/craft/][The Craft of Text Editing --or-- Emacs for the Modern World]]

** GraalVM / Truffle

[[https://www.graalvm.org/][GraalVM]]: “An advanced JDK with ahead-of-time Native Image compilation”

- [[https://github.com/oracle/graalpython][GraalPy, the GraalVM Implementation of Python]]

  - What To Read: Excellent (as well as performance-centric) usage of [[https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/GenerateNodeFactory.html][=@GenerateNodeFactory=]].
  - [[https://github.com/oracle/graalpython/blob/master/graalpython/com.oracle.graal.python/src/com/oracle/graal/python/nodes/function/builtins/BuiltinCallNode.java][BuiltinCallNode.java]]
  - [[https://github.com/oracle/graalpython/blob/f753cf7d7a01a4594a72a53add6f3c4242babf48/graalpython/com.oracle.graal.python/src/com/oracle/graal/python/nodes/function/BuiltinFunctionRootNode.java][BuiltinFunctionRootNode.java]]

- [[https://github.com/oracle/graal/tree/master/espresso][Espresso - Java On Truffle]]

  - What To Read: How to write a byte-code interpreter efficiently with Truffle

  - [[https://www.graalvm.org/latest/graalvm-as-a-platform/language-implementation-framework/OnStackReplacement/][On-Stack Replacement (OSR)]]

- Mumble

  - [[https://cesquivias.github.io/blog/2015/01/08/writing-a-language-in-truffle-part-3-making-my-language-much-faster/][Writing a Language in Truffle. Part 3: Making my Language (Much) Faster]]

  - [[https://cesquivias.github.io/blog/2015/01/15/writing-a-language-in-truffle-part-4-adding-features-the-truffle-way/][Writing a Language in Truffle. Part 4: Adding Features the Truffle Way]] (tail-call optimization)

- [[https://www.endoflineblog.com/graal-truffle-tutorial-part-0-what-is-truffle][Graal Truffle tutorial part 0 – what is Truffle?]]: A series of Truffle tutorial on a JS-like language

- [[https://github.com/arvyy/islisp-truffle][Truffle ISLISP]]: A Lisp-variant language implemented with Truffle

** Others

- CRDT :: Conflict-free Replicated Data Type

  - [[https://www.inkandswitch.com/peritext/][Peritext - A CRDT for Rich-Text Collaboration]]

    - Thoughts: This might help if we are to enable transparent parallelization for Emacs Lisp.
      For simple variables, we can do pretty well with a Copy-on-Write global environment.
      However, we will need a concrete way to handle parallelized buffer edits.

  - [[https://arxiv.org/abs/2409.14252][Collaborative Text Editing with Eg-walker: Better, Faster, Smaller]]
