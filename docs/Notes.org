#+title: Notes To Myself

Notes to myself while designing this project and scheduling TODO entries,
i.e., How To Implement Your Own Shitty Emacs.

* Notes

** Display Engine

There've been some discussions:

- [[https://lists.gnu.org/archive/html/emacs-devel/2021-12/msg02652.html]]
- [[https://lists.gnu.org/archive/html/emacs-devel/2024-12/msg00455.html]]
- https://github.com/CeleritasCelery/rune/issues/61

However, I don't think I should start designing it before fully understanding
what =redisplay= does (maybe by digging into my centaur-tabs crashes).

Also: there are other Emacs re-implementations and the best we can get is to
work together towards a new display backend that hopefully can also work on GNU
Emacs.

*** Reading List

- [[https://faultlore.com/blah/text-hates-you/#characters-can-be-too-damn-big][Text Rendering Hates You - Aria Desires]]
- [[https://www.finseth.com/craft/index.html][The Craft of Text Editing - Craig A. Finseth]]

*** Personal Preferences

Despite the usual complaints about how Electron bloats, I actually think it is
good to simply embed the rendering engine of any browser:

1. They should support BIDI out of the box. (Well, since Emacs also supports
   turning off BIDI, this might not be as good after all.)
2. Decent performance.
3. Multi-media support.

Any of the above will take significant effort if we are to implement them
ourselves (correctly). Of course we can offload the work to some UI frameworks,
but I believe BIDI support will rule out /most/ of the so-called modern
GPU-powered ones.

** Obarrays

So I was testing on Emacs 29 because it was what the official Arch repo offers.
Recently I have switched to Emacs 30 since it is what we aim to support, and it
turns out... I should have switched much much earlier.

The single change: obarrays are now opaque types.

In Emacs 29, obarrays are vectors with symbols (or 0) as their elements. It is
basically a hash table with the internal linked list stored directly in its
symbols. So when we =(aset ob1 0 (aref ob2 0))=, I have no idea what might
happen, but it /is/ a behavior that we can observe and reproduce, and thus a
thing that we need to support by making symbols part of the obarray, if we were
targeting Emacs 29. With opaque obarrays, we can now make symbols /immutable/,
and separate symbols and value containers.

So, thank goodnees for making more things opaque, Emacs developers!

** Emacs MULE

*** Example 1: =iso-2022-jp=

I know little about the history behind Emacs. But according to [[http://www.xemacs.org/Documentation/21.5/html/lispref_64.html][XEmacs Lisp
Reference Manual: 63. MULE]] and [[https://flex.phys.tohoku.ac.jp/texi/faq/faq_85.html][Frequently Asked Questions about Emacs - Question
27 (What variants of GNU Emacs exist?)]], MULE comes from Japanese forks of Emacs,
which I do think are some Emacs variants (besides XEmacs) that should be
remembered.

These days, Emacs can handle multilingual text and can (seemingly) losslessly
convert between Unicode and other charsets, even for some charsets not yet
mapped to Unicode. Emacs achieves this by extending the code point range of its
internal UTF-8-like string representation to =0 - #x3FFFFF=: The =0 - #x10FFFF=
range is for Unicode, and the remaining is for lossless storage of
non-convertible characters.

The following example is inspired by [[https://scrapbox.io/shimizukawa/Unicode%E3%81%AB%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0%E3%81%95%E3%82%8C%E3%81%A6%E3%81%84%E3%81%AA%E3%81%84%E6%96%87%E5%AD%97][Unicode„Å´„Éû„ÉÉ„Éî„É≥„Ç∞„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑÊñáÂ≠ó - Ê∏ÖÊ∞¥
Â∑ù„ÅÆScrapbox]] ("Characters that are not yet mapped to Unicode" in English):

#+begin_src elisp :results table
  (let* (;; Ê¥≤Ô®ëÁ•ûÁ§æ if the text were convertible to Unicode
         (jis-encoded-bytes  "\x1b$B='yu?@<R\x1b(B")
         ;; Losslessly decoding to Emacs strings
         (lossless-string    (decode-coding-string jis-encoded-bytes 'iso-2022-jp))
         (convertible-char-1 (aref lossless-string 0))
         (non-convertible    (aref lossless-string 1))
         (re-encoded-bytes   (encode-coding-string lossless-string 'iso-2022-jp)))
    `(("Converted string"
       ;; Replace non-Unicode chars so that the outputs won't disrupt the coding of this file.
       ;; It did corrupted the encoding last time...
       ,(replace-regexp-in-string "[^\0-\U0010FFFF]" "?" lossless-string))
      ("Original bytes" ,(prin1-to-string jis-encoded-bytes))
      ("Re-encoded bytes" ,(prin1-to-string re-encoded-bytes))
      ("Convertible char" ,(format "%c (#x%06x < #x10FFFF)" convertible-char-1 convertible-char-1))
      ("Non-convertible"  ,(format "__ (#x%06x > #x10FFFF)" non-convertible))))
#+end_src

#+RESULTS:
| Converted string | Ê¥≤?Á•ûÁ§æ                  |
| Original bytes   | "$B='yu?@<R(B"       |
| Re-encoded bytes | "$B='yu?@<R(B"       |
| Convertible char | Ê¥≤ (#x006d32 < #x10FFFF) |
| Non-convertible  | __ (#x1420a4 > #x10FFFF) |

*** Example 2: =lisp/language/ethiopic.el=

So awhile ago I started bootstraping files from =emacs/lisp/language/*.el=,
and... there you go. Another example right in the source code:

#+begin_src elisp
  (let ((non-unicode (with-temp-buffer
                       (insert-file (locate-file "ethiopic.el" load-path))
                       (replace-regexp "[\0-\U0010FFFF]+" "")
                       (buffer-string))))
    (format "#x%X > #x10FFFF" (aref non-unicode 0)))
#+end_src

#+RESULTS:
: #x1A01CA > #x10FFFF

There are some more files similar to =ethiopic.el=:

#+begin_src elisp
  (defun file-contains-non-unicode? (file)
    (with-temp-buffer
      (insert-file file)
      (search-forward-regexp "[^\0-\U0010FFFF]" nil t)))

  (let* ((language-dir (file-name-parent-directory (locate-file "ethiopic.el" load-path)))
         (files (append (directory-files language-dir t ".*\\.el$")
                        (directory-files (file-name-concat (file-name-parent-directory language-dir)
                                                           "international")
                                         t ".*\\.el$")))
         non-unicode-files)
    (dolist (file files)
      (if (file-contains-non-unicode? file)
          (push (list (file-name-nondirectory file)) non-unicode-files)))
    non-unicode-files)
#+end_src

#+RESULTS:
| titdic-cnv.el |
| tibetan.el    |
| tibet-util.el |
| ind-util.el   |
| ethiopic.el   |
| ethio-util.el |

** Truffle Debugging

During performance testing, I found the following options (supplied to =Context=
builders) quite useful:

#+begin_src text
  .allowExperimentalOptions(true)
  .option("engine.TraceCompilation", "true")
  .option("engine.CompilationFailureReaction", "Diagnose")
  .option("engine.SpecializationStatistics", "true")
  .option("compiler.TraceMethodExpansion", "truffleTier")
#+end_src

To look into GraalVM compiler graphs, one may use Ideal Graph Visualizer or
[[https://github.com/Shopify/seafoam][Seafoam]].

- =SpecializationStatistics= requires something like:

  #+begin_src groovy
    tasks.withType(JavaCompile) {
        options.compilerArgs += '-Atruffle.dsl.GenerateSpecializationStatistics=true'
    }
  #+end_src

** Dynamic ELisp & Truffle

So special forms in Emacs Lisp is actually "special" ordinary functions,
which means... one can overwrite them or assign them to other symbols.
So this means you cannot convert a lisp cons =(my-func (func?))= to an AST
until you evaluate it.

- For a normal function, the above may expand to =FuncCallNode[my-func,
  FuncCallNode[func?]]=.
- For special forms..., like =(defalias 'my-func 'quote)=, it becomes
  =FuncCallNode[my-func, LispObject[(func?)]]=.

It makes it hard to cache the =CallTarget= used by Truffle. Also, since a
function can be a macro that yields dynamic AST, I don't think it is actually
possible to Truffle-JIT this thing efficiently... So bytecode it is.

P.S. The current interpreted AST node =ELispInterpretedNode.java= somehow
manages to produce an AST-ish thing for Truffle to JIT-compile. It is probably
not that efficient though. Read the code and comments for more details.

*** Efficient local variable lookup

Most Truffle languages store local variables on frames (=VirtualFrame=). There
are some optimizations with this approach:

- Truffle can optimize many things for you by inlining and placing things on a
  real stack after JIT-compilation.
- Nodes for reading and setting variables can cache the location of a specific
  variable, yielding better performance.
- Lexical scopes are now materialized frames, which Truffle is aware and can
  potentially optimize/inline away the cost.

However, as always, Emacs Lisp brings some problems:

- Most languages use static analysis to map variable names to their slot number.
  Static analysis ensures the slot numbers do not change between calls and is
  safe to cache.

  #+begin_src js
    function f(
      a,  // slot#0
      b,  // slot#1
    ) {
      const c = 0;  // slot#2
      if (a) {
        let d = 1;  // slot#3
        b += d + a;
      }
      let e = c + b;  // slot#4 or slot#3 if reusing slots
      return e;
    }
  #+end_src

- As for ELisp, well, you cannot do /static/ analysis with a /dynamic/ AST.

  #+begin_src elisp
    (defun f (a  ;; slot#0
              b  ;; slot#1
              )
      (some-macro
       ;; the slot of `c' depends on the expansion result of `some-macro'
       (let ((c 1)))))
  #+end_src

  Alternatively, similar to how we handle things in =ELispInterpretedNode.java=,
  we may dynamically assign slot numbers and cache at runtime instead. However,
  Truffle =FrameDescriptor= requires a constant slot count at declaration time,
  which poses yet another challenge.

**** Previous solution

- Use a constant slot count (=~32=) for frame descriptors. And spill to a
  separate =ArrayList= if there are too many variables.

- Keep static analysis stats on the stack frame:
  - Slot #0: =LexicalFrame=
    - Keeping track of occupied frame slots, symbol-to-slot-number mappings
      - Slot numbers: positive: local variable; zero or negative: argument
    - Parent frame reference
    - Whether the current frame is materialized: We can (only) reuse slots when
      the frame is not yet materialized (most helpful with =let= blocks in
      loops).
  - Slot #1: Frame spill =ArrayList= slot
  - Other slots: ordinary value slots

- Future enhancements (or are they?):
  - Track required slot counts for each function and try to pre-allocate (or
    shrink stack size) for the following calls.
    - Using =8= instead of =32= as the slot count does seem to affect throughput
      though.
  - Benchmark to find more hotspots (possibly in assembly).

**** Re-implementation

It is too costly to maintain separate lexical contexts for every function call.
Instead, we move the lexical context from stack frame to AST nodes with the
following modification:

- We never reuse stack slots. Since every slot has its own =long/double=
  specialization, reusing slots will risk invalidating the specializations.
- Every variable is allocated a constant slot number.

However, when users create closures in a loop, we might need to copy the frames
(and the lexical context) for the closures. See =ELispLexical.java= for the
implementation and =BuiltInEvalTest.java= for an example
(=testPerIterationScope=).

This improves the performance a little bit. However, after this, we changed
=ELispFrameSlotNode.java= to use primitive frame slots whenever possible, which
brings a ~3x performance boost and we run =mandelbrot= almost as fast as Java
now.

*** The Graal Truffle tutorial series by Adam Ruka

#+begin_src js
  var absFuncRootNode = new FunctionRootNode(
    this,
    AbsFunctionBodyExprNodeGen.create(new ReadFunctionArgExprNode(0)),
  );
  context.globalScopeObject.newConstant(
    "Math.abs",
    new FunctionObject(absFuncRootNode.getCallTarget()),
  );
#+end_src

Basically:

- =FunctionCallExprNode= evaluates all its children and dispatches the call with
  =FunctionDispatchNode=, which uses a =DirectCallNode= to call a
  =FunctionObject=.
- =Math.abs= is a =FunctionObject= which is simply a wrapper for a =CallTarget=,
- The =CallTarget= is obtained from a =RootNode= subclass (=FunctionRootNode=),
  which is wrapped around a function body node (=AbsFunctionBodyExprNode=
  extending =EasyScriptExprNode=).
- =AbsFunctionBodyExprNode= uses =ReadFunctionArgExprNode= as a child node
  to read parameters from the =VirtualFrame=.
- =@GenerateNodeFactory= is used to ease writing more built-in functions.

** Truffle Function Calls

It is quite hard to gather all the details needed to build an efficient function
call system in Truffle. Basically, we want:

1. Built-in functions with less boilerplate code
2. Support for user-defined functions
3. Fixed args, optional args and varargs
4. Efficiency

And we need the following mechanism:

1. Global/local variable dereferencing for named function calls
2. Vararg parameter passing
3. Fixed arg parameter passing optimization

We will try to first follow a tutorial and then look into how some official
implementations do this.

*** SimpleLanguage - Official Implementation #1

Its approach is quite similar to the previous tutorial:

- =SLInvokeNode= corresponds to function call AST node.
  It uses =InteropLibrary= to dispatch calls though.
- =SLFunctionRegistry=: Maps function names to =SLFunction= objects.
- =SLFunction= wraps a =RootCallTarget=.
- =SLPrintlnBuiltin= extends =SLBuiltinNode= (which has the
  =@GenerateNodeFactory= annotation and extends =SLExpressionNode=).
- Built-in functions are registered by =SLContext::installBuiltins=, which in
  turn calls =SLLanguage::lookupBuiltin= to setup =SLReadArgumentNode= and
  functions.
- Notably, it seems to use a =CyclicAssumption= to detect call target changes.

*** GraalJs

- =JSFunctionCallNode= has a internal function object cache.
- No =@GenerateNodeFactory= is used. Global functions are setup with
  =JSRealm::setupGlobals= with hand-written function lists.
- =JSFunction= wraps (deeply) a =CallTarget=.
- Notably, =JSFunctionCallNode= implements a rather complex caching logic in its
  =executeAndSpecialize= function.

*** GraalPython

- The built-in functions in GraalPython show-case an advanced (undocumented?)
  usage of =@GenerateNodeFactory=:

  It seems that, when annotating inner classes with =@GenerateNodeFactory=,
  the DSL processor will also generate a factory for the outer class,
  containing a =getFactories()= method returning all the inner factories.
  This can be extremely convenient for writing and loading built-in
  functions in batch.

* Reading List

** Emacs

There are quite a lot Emacs forks or re-implementations out there, with helpful
comments and discussions.

- [[https://www.cliki.net/cl-emacs][CL-Emacs]]: ‚ÄúVarious people have proposed an emacs-like editor written in Common
  Lisp. This page collects together a few possibilities.‚Äù

- [[https://jemacs.sourceforge.net/][JEmacs]]: The Java/Scheme-based Emacs Text Editor (source @ [[https://gitlab.com/kashell/Kawa/-/tree/master/gnu/jemacs?ref_type=heads][GNU Kawa]])

- [[https://github.com/remacs/remacs][remacs]]: Emacs fork with some ELisp builtin functions rewritten in Rust

- [[https://github.com/CeleritasCelery/rune][Rune]]: Emacs (mainly ELisp) reimplementation in Rust

*** Emacs Lisp

- [[https://www.emacswiki.org/emacs/HackerGuide][EmacsWiki: Hacker Guide]]

- [[https://github.com/remacs/remacs/wiki/Emacs-Types][Emacs Types - remacs Wiki]]

- [[https://blog.csdn.net/ftuc5dn/article/details/135421777][emacs Ê∫êÁ†ÅÂàÜÊûêÔºà‰∫åÔºâ]]: Contains a pretty diagram for some structs

- [[https://github.com/remacs/remacs/issues/499][Emacs internal string encoding - remacs Issue #499]]

- [[https://github.com/emacs-mirror/emacs/blob/46f3452b30f39a69f610faab58c1490b34dd367d/src/lread.c#L3936][read0 @ src/lread.c]]: The Emacs Lisp S-expr lexer & parser

- [[https://chrismennie.ca/EMACS-Conceptual-Architecture.pdf][[PDF] Conceptual Views of EMACS's Architecture - chrismennie.ca!]]

- [[https://github.com/CeleritasCelery/rune/blob/master/src/bytecode.rs][bytecode.rs @ rune]]

- [[https://rocky.github.io/elisp-bytecode.pdf][[PDF] GNU Emacs Lisp Bytecode Reference Manual]] ([[https://github.com/rocky/elisp-bytecode][TeX source here]])

*** GUI

- [[https://github.com/CeleritasCelery/rune/issues/61][discussion about display engine and GUI model of emacs - rune Issue #61]]

- [[http://www.finseth.com/craft/][The Craft of Text Editing --or-- Emacs for the Modern World]]

** GraalVM / Truffle

[[https://www.graalvm.org/][GraalVM]]: ‚ÄúAn advanced JDK with ahead-of-time Native Image compilation‚Äù

- [[https://github.com/oracle/graalpython][GraalPy, the GraalVM Implementation of Python]]

  - What To Read: Excellent (as well as performance-centric) usage of [[https://www.graalvm.org/truffle/javadoc/com/oracle/truffle/api/dsl/GenerateNodeFactory.html][=@GenerateNodeFactory=]].
  - [[https://github.com/oracle/graalpython/blob/master/graalpython/com.oracle.graal.python/src/com/oracle/graal/python/nodes/function/builtins/BuiltinCallNode.java][BuiltinCallNode.java]]
  - [[https://github.com/oracle/graalpython/blob/f753cf7d7a01a4594a72a53add6f3c4242babf48/graalpython/com.oracle.graal.python/src/com/oracle/graal/python/nodes/function/BuiltinFunctionRootNode.java][BuiltinFunctionRootNode.java]]

- [[https://github.com/oracle/graal/tree/master/espresso][Espresso - Java On Truffle]]

  - What To Read: How to write a byte-code interpreter efficiently with Truffle

  - [[https://www.graalvm.org/latest/graalvm-as-a-platform/language-implementation-framework/OnStackReplacement/][On-Stack Replacement (OSR)]]

- Mumble

  - [[https://cesquivias.github.io/blog/2015/01/08/writing-a-language-in-truffle-part-3-making-my-language-much-faster/][Writing a Language in Truffle. Part 3: Making my Language (Much) Faster]]

  - [[https://cesquivias.github.io/blog/2015/01/15/writing-a-language-in-truffle-part-4-adding-features-the-truffle-way/][Writing a Language in Truffle. Part 4: Adding Features the Truffle Way]] (tail-call optimization)

- [[https://www.endoflineblog.com/graal-truffle-tutorial-part-0-what-is-truffle][Graal Truffle tutorial part 0 ‚Äì what is Truffle?]]: A series of Truffle tutorial on a JS-like language

- [[https://github.com/arvyy/islisp-truffle][Truffle ISLISP]]: A Lisp-variant language implemented with Truffle

** Others

- [[https://webkit.org/blog/10308/speculation-in-javascriptcore/][Speculation in JavaScriptCore | WebKit]]

- CRDT :: Conflict-free Replicated Data Type

  - [[https://www.inkandswitch.com/peritext/][Peritext - A CRDT for Rich-Text Collaboration]]

    - Thoughts: This might help if we are to enable transparent parallelization for Emacs Lisp.
      For simple variables, we can do pretty well with a Copy-on-Write global environment.
      However, we will need a concrete way to handle parallelized buffer edits.

  - [[https://arxiv.org/abs/2409.14252][Collaborative Text Editing with Eg-walker: Better, Faster, Smaller]]

  More thoughts: To allow automatic concurrentization, we will need to deal with
  concurrent buffer access. Some ways I can think of:

  1. No handling at all. So, for example, when the user requests completion at
     =prefix<cursor>= and moves the cursor to elsewhere before the scripts
     actually inserts any content, this will most likely lead to the content
     inserted at a wrong position.
     - Can the user correctly interpret this behavior? Sometimes, if the delay
       is not too long.
     - Can undo help? Yes. If the user is not satisfied by the insersion, they
       can simply revert it.
     - Thread safety? If access to a buffer does not block (or leads to green
       threads switching contexts), yes.
  2. Use locks.
     - Caveat: It leads to automatic deadlocks.
  3. CRDT: After the reasoning above, CRDT actually seems the same (at least to
     the user): interpretable if the delay is short; the user should be able to
     undo; thread safe (albeit maybe safer). But it does allow the user to move
     the cursor elsewhere while waiting for completion.
  4. OT. Simpler than CRDT.
