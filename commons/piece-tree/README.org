#+title: A Piece Tree Implementation in Java

This sub module hosts three (or maybe two) data structures for Emacs texts:

- Red-black trees for Emacs text properties and buffer markers

- A piece tree for buffer texts

  #+begin_quote
  Actually, this implementation is a direct transliteration of the TypeScript
  implementation from VS Code [[https://github.com/microsoft/vscode/blob/main/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase.ts][pieceTreeBase.ts]]. For more information on piece
  trees, see [[https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation][the blog post from a VS Code developer]].
  #+end_quote

  Well, it was a transliteration. But we have now migrated from =java.lang.String=
  to =TruffleString= to use code point offsets instead of UTF-16 char offsets.
  By the way, the performance degraded significantly after the switch.

  Also, CR (and CR and then LF) new line handling has been removed because Emacs
  always converts them prior to inserting them into a buffer.

* Some (Probably Badly Designed) Benchmarks

#+begin_html
<img src="./gap-buffer-rules.png" alt="Gap buffers are pretty good!" />
#+end_html

[[file:gap-buffer-rules.png][Gap buffers are pretty good!]]

The figure above shows the results of my (badly designed) benchmarks comparing
the performance of this implementation with a gap buffer implementation and a
rope. Precautions though:

1. The benchmarks are not performed with any warm-up, to hopefully capture worst
   cases.
2. Only our piece tree implementation keeps track of line counts, which might
   add a bit of overhead. (And the benchmark does not test line-based
   operations.)

Basically, if string concatenation is the only operation you need, a gap buffer
is probably the best choice (and the performance of plain string concatenation
is not that bad). But if you want to care about line numbers, you will need
something more complex, whether it is a [[https://github.com/CeleritasCelery/rune/blob/master/crates/text-buffer/src/metric.rs][metadata tree along a gap buffer]], or [[https://zed.dev/blog/zed-decoded-rope-sumtree][a
rope-like sum tree]]. As for me, writing a tree implementation from scratch /and/
making sure it works is simply too overwhelming, so I guess I will stick with
this piece of transliteration anyway.

* On Text Properties and Markers

As for text properties (like =#("red blue" 1 3 (color red) 5 8 (color blue))=)
and buffer markers (like =(point)=) in Emacs, it should be noted that they are
in sync with the text:

#+begin_src elisp
  (with-temp-buffer
    (insert #("aa" 1 2 (color red)))   ; <red>aa</red>
    (insert #("cc" 1 2 (color blue)))  ; <red>aa</red><blue>cc</blue>
    (goto-char 3)
    (insert "bb")
    (prin1-to-string (buffer-string))) ; <red>aa</red>bb<blue>cc</blue>
#+end_src

#+RESULTS:
: #("aabbcc" 1 2 (color red) 5 6 (color blue))

Our implementation ([[file:src/main/java/party/iroiro/juicemacs/piecetree/meta/MarkPieceTreeBase.java][MarkPieceTreeBase.java]]) is simply modified from the piece
tree code, treating each interval as a "piece". (And marks are special
zero-length pieces with left/right affinity.)

* License

Both the original TypeScript implementation and this implementation are licensed
under the MIT license.

#+begin_quote
MIT License

Copyright (c) 2015 - present Microsoft Corporation

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#+end_quote

#+begin_quote
Copyright 2024 gudzpoz

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#+end_quote

* Developing

We have a tiny fuzzing test. Also, the current version of the Java code is based
on the TypeScript code from [[https://github.com/microsoft/vscode/commit/6b924c51528e663dda5091a1493229a361676aca][commit 6b924c5]], and it should be good to check if VS
Code has pushed any fixes from time to time.
